data:
  train_path: "data/X_train.csv.csv"
  train_cleaned_path : "data/X_train_cleaned.csv.csv"
  test_path: "data/X_test.csv.csv"
  drift_path: "data/X_drift.csv.csv"
  output_path: "output/results.csv"
  model_save_path: "models/"
  model_path: "models/Model.pkl"

features:
  numerical: 
    - AgeConducteur
    - BonusMalus
    - AgeVehicule
    - PrimeCommerciale
  categorical: 
    - SexeConducteur
    - StatutMatrimonial
    - FrequencePaiement
    - CodeProfession
    - ClasseVehicule
    - PuissanceVehicule
    - CarburantVehicule
    - UsageVehicule
    - Garage
    - Region
  capping: 
    - BonusMalus
    - AgeVehicule
    - PrimeCommerciale
  numerical_log: 
    - AgeConducteur_log
    - BonusMalus_log
    - AgeVehicule_log
    - PrimeCommerciale_log

models:
  linear_models:
    LinearRegression:
      fit_intercept: true
    RidgeRegression:
      alpha: 0.6
      solver: "auto"
    LassoRegression:
      alpha: 0.001
      max_iter: 2000
    ElasticNetRegression:
      alpha: 0.001
      l1_ratio: 0.7

  ensemble_methods:
    RandomForest:
      n_estimators: 300
      max_depth: 5
      min_samples_split: 5
      min_samples_leaf: 2
      max_features: "sqrt"
      bootstrap: true

    GradientBoosting:
      n_estimators: 200
      learning_rate: 0.001
      max_depth: 5
      subsample: 0.8
      min_samples_split: 5
      min_samples_leaf: 2

    XGBoost:
      n_estimators: 300
      learning_rate: 0.01
      max_depth: 5
      subsample: 0.8
      colsample_bytree: 0.8
      reg_lambda: 0.8
      reg_alpha: 0.4
      gamma: 0.1

    LightGBM:
      num_leaves: 31
      learning_rate: 0.05
      n_estimators: 300
      max_depth: 5
      subsample: 0.8
      colsample_bytree: 0.8
      min_child_samples: 20
      min_child_weight: 0.001
      lambda_l1: 1.5
      lambda_l2: 0.8

    CatBoost:
      iterations: 300
      learning_rate: 0.05
      depth: 5
      l2_leaf_reg: 3.0
      subsample: 0.8
      bagging_temperature: 1
      random_strength: 1
      rsm: 0.8
      early_stopping_rounds: 50
      max_leaves: 31
      grow_policy: "SymmetricTree"
      border_count: 254
      leaf_estimation_iterations: 10

  neural_networks:
    MLP:
      hidden_layer_sizes: [150,100,50]
      max_iter: 100000
      alpha: 0.5
      learning_rate: 'adaptive'
      learning_rate_init: 0.00001
      validation_fraction: 0.2
      activation: 'tanh'
      early_stopping: True
      solver: 'adam'

evaluation:
  cv_folds: 5
  scoring_metric: "neg_mean_squared_error"
